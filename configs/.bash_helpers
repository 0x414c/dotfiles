#!/usr/bin/env bash

#
# ~/.bash_helpers
#


## Takes a note
function note {
    # if file doesn't exist, create it
    if [[ ! -f $HOME/.notes ]]; then
        touch "$HOME/.notes"
    fi

    if ! (($#)); then
        # no arguments, print file
        cat "$HOME/.notes"
    elif [[ "$1" == "-c" ]]; then
        # clear file
        >| "$HOME/.notes"
    else
        # add all arguments to file
        printf "%s\n" "$*" >> "$HOME/.notes"
    fi

    return 0
}

## Extracts an archive
function extract {
    local c e i

    (($#)) || return

    for i; do
        c=''
        e=1

        if [[ ! -r $i ]]; then
            echo "$0: file is unreadable: \`$i'" >&2
            continue
        fi

        case $i in
            *.t@(gz|lz|xz|b@(2|z?(2))|a@(z|r?(.@(Z|bz?(2)|gz|lzma|xz)))))
                   c=(bsdtar xvf);;
            *.7z)  c=(7z x);;
            *.Z)   c=(uncompress);;
            *.bz2) c=(bunzip2);;
            *.exe) c=(cabextract);;
            *.gz)  c=(gunzip);;
            *.rar) c=(unrar x);;
            *.xz)  c=(unxz);;
            *.zip) c=(unzip);;
            *)     echo "$0: unrecognized file extension: \`$i'" >&2
                   continue;;
        esac

        command "${c[@]}" "$i"
        ((e = e || $?))
    done

    return "$e"
}

## Compiles source file w/ GCC
function ccc {
    [[ $1 ]]    || { echo "Missing operand" >&2; return 1; }
    [[ -r $1 ]] || { printf "File %s does not exist or is not readable\n" "$1" >&2; return 1; }
	local output_path=${TMPDIR:-/tmp}/${1##*/};
	gcc "$1" -o "$output_path" && "$output_path";
	rm "$output_path";

    return 0;
}

## Checks if particular command exists in the system
function cmd_exists {
    command -pv "$1" >/dev/null 2>&1
}

## Prints horizontal separator line
function hr {
## "*" "═" "▬" "━"
    command yes '━' 2>/dev/null | head -n $COLUMNS | tr -d '\n'

    return 0
}

## Search manpage given in argument `1' for term given in argument `2' (case insensitive)
## displays paginated result with colored search terms and two lines surrounding each hit
function manf {
    man $1 | grep -iC2 $2 | less

    return 0
}

## Makes a new dir and cds into it
function mkcd {
    mkdir -pv "$1" && cd "$1"

    return 0
}

## Makes history backup
function backup_history {
    [ ! -f $HISTFILE ] && touch $HISTFILE
    [ ! -f $HISTFILE2 ] && touch $HISTFILE2
    cp $HISTFILE $HISTFILE2 1>/dev/null 2>&1

    return 0
}

## See `https://gist.github.com/lelandbatey/8677901'
function wb_clean {
	convert "$1" -morphology Convolve DoG:15,100,0 -negate -normalize -blur 0x1 -channel RBG -level 60%,91%,0.1 "$2"
}

## Welcome message pt. I
function welcome_msg {
#    fortune -a | fmt -80 -s | $(shuf -n 1 -e cowsay cowthink) -$(shuf -n 1 -e b d g p s t w y) -f $(shuf -n 1 -e $(cowsay -l | tail -n +2)) -n
#    echo -en '\n'
    command fortune -a | fmt -75 -s | cowsay -n -f tux
#    echo -en '\n'

    return 0
}

# EOF
